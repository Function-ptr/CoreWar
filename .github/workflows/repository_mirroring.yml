name: Mirroring

on: [ pull_request, push ]

env:
  EXECUTABLES: 'asm/asm,corewar/corewar'

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - uses: actions/checkout@v3
      - name: Run coding style checker
        id: check_style
        run: |
          check.sh $(pwd) $(pwd)
          output=$(cat coding-style-reports.log)
          echo "$output"
          out=$(echo "$output" | tr ' ' '&')
          for line in $out; do
            corrline=$(echo "$line" | tr '&' ' ')
            file=$(echo "$corrline" | cut -d: -f1 | sed 's/\.\///g')
            numline=$(echo "$corrline" | cut -d: -f2)
            echo "::error file=$file,line=$numline,title=$(echo "$corrline" | cut -d: -f3) coding style error::$corrline"
          done
          if [[ "$output" =~ "MAJOR" ]] || [[ "$output" =~ "MINOR" ]] || [[ "$output" =~ "INFO" ]]; then
              exit 1
          fi

  check_program_compilation:
    runs-on: ubuntu-latest
    container:
      image: quentinfil/epitouk_light_weight:latest
    steps:
      - uses: actions/checkout@v3
      - name: Compile program
        run: make
        timeout-minutes: 2
      - name: Clean build
        run: make clean
      - name: Check executables
        run: |
          execs=$(echo $EXECUTABLES | tr "," "\n")
          error=false
          for exe in $execs; do
            exe=./$exe
            if [[ -f $exe ]] && [[ -x "$exe" ]]; then
              continue
            else
              error=true
              echo "File $exe not found or not executable"
              echo "::error title=File $exe not found or not executable::$exe"
            fi
          done
          if $error; then
            echo "Exiting with error"
            exit 1
          fi

  run_tests:
    runs-on: ubuntu-latest
    container:
      image: quentinfil/epitouk_light_weight:latest
    steps:
      - uses: actions/checkout@v3
      #- name: Compile program
      #  run: |
      #    make
      #    cp 42sh tests/
      #  timeout-minutes: 2
      #- name: Clean build
      #  run: make clean
      #- name: Run tester and check output
      #  run: |
      #    commit="${{ github.event.head_commit.message }}"
      #    author="${{ github.event.pusher.name }}"
      #    if [[ "$commit" =~ [SKIP] && ("$author" == "LouisDupraz" || "$author" == "PasVegan") ]];then
      #      echo "Tests force skipped by user $author"
      #      exit 0
      #    fi
      #    cd ./tests
      #    ./improved_tester.sh
      #    ./print_tests.sh

      #    # Run Valgrind for each test after tests have been executed and printed
      #    parent_folder=$(find /tmp -type d -name 'test*' -print -quit)
      #    if [ "$parent_folder" == "" ]; then
      #      exit 0
      #    fi
      #    for test in "$parent_folder"/*/;
      #    do
      #     test_id=$(basename "$test")
      #     setup_cmd=$(grep -A1 "^SETUP=" tests | sed -n '2p')
      #     test_cmds=$(grep -A1 "^TESTS=" tests | sed -n '2p')
      #     eval "$setup_cmd"
      #     echo "$test_cmds" | while read cmd;
      #     do
      #       if [ ! -z "$cmd" ]; then
      #         echo "$cmd" | valgrind --leak-check=full --show-leak-kinds=all --log-file="$test/valgrind.log" ./42sh
      #       fi
      #     done
      #    done

      #    ./print_valgrind.sh
      #  timeout-minutes: 5

  mirror_repository:
    runs-on: ubuntu-latest
    needs: [ check_program_compilation, check_coding_style, run_tests]
    steps: # <-- must use actions/checkout before mirroring!
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            git@github.com:EpitechPromo2027/B-CPE-200-NCE-2-1-corewar-louis.dupraz.git
          ssh_private_key: # <-- use 'secrets' to pass credential information.
            ${{ secrets.REPO_MIRROR_SSH_KEY }}
